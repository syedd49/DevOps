To send an email notification from jenkins:
by default smtp runs on 1025 port and 8025 where Web UI Runs

Mailhog image from docker


docker run -d -p 1025:1025 -p 8085:8025 mailhog/mailhog

*.Apache Mesos: is a orchestration engine for container.
*.Marathon is a framework for docker runtime images.
*.Autoscaling and fault tolerance inbuilt in kubernetes
*.Key Concepts:
  - Namespace: Partitationing different projects 
  - Pods: isolated process/PID namespace
          root filesystem namespace
          user namespace
          network namespace
          hostname/uts namespace
          volumes
*. Kubenetes Follows SPECS
       A pi version
       K ind (entity)
       M etadata (Label)
       S pec (similar to docker compose)
*. Replication Controllers: 2types
      Labelling and Selection helps to deployment fail pods to available pods. 
      Control loop to monitoring ( it works through Labelling )
      Replication Controllers (works for A and B and C) v/s replicaSet ( works for A or B or C) 
      replicaset + update stratergies = Deployment
*. Service Discovery:
      Services works on SPEC with labels and selectors
      connects to end points with selectors.
      Service has constant identifier is CLUSTER IP (it never changes)
      docker runs on Port 32768.
*. Apply primitive in application Slack
      Namespaces
      services - L4 networking and Loadbalancer and discoveries
      deployment
*. ConfigMaps and Secrets
   - persistent volumes (mounting dynamically or statically)
   - Network and CNI 
         Network Policies : apply firewalls
   - HELM Package Manager:- packaging ur application to create stack      
   - RBAC 1.6version, gives authentication and authorization
   - Horizontal Pod Autoscalar 
   - HEAPSTER :- Monitoring in Kubernetes
*. Additional Controllers:
         Deployments
         Daemon Set allow u to run particular monitoring server in every single node its same like global set in Swarm
         Stateful States its depends on services bcoz it does not come with end points.
         CRON
         JOBS
*. Architecture of Kubernetes:
         Master Node: Scheduler,API Server, Controllers Manager, etcd (it has all information about cluster and master).
         Worker Node: Docker(Runtime Engine),kubelet,kubeproxy
*. External services:
        Storage : NFS or block storage etc
        Log mgmt: Splunk etc
        Monitoring : promothieus,griffana etc
        
*. DOCKERS: play-with-docker.com
      Docker system info
      docker help
      default runtime in docker is runc
      Commands:
        docker container run alpine:3.6 uptime
        docker system events
        docker container run apline ps
        docker ps -l
        docker ps -a
        docker ps -n 2 (Last two container)
        docker container -it alpine sh
        ps aux
        ps -ef
        docker container -idt alpine sh
*. OPERATIONS in Dockers:
        docker rename oldname newname
        docker logs a78 or containerID -f
        docker exec a78 ps
        docker exec -it a78 sh (run anything within the container)
        docker inspect (detailed info about the container)
        docker cp (to copy)
        docker container cp filename tofile/path
        docker stop or docker stop containerID
        docker rm container
        docker rm -f container(to remove forcefully)
  *. docker container run -idt -P nginx (-P is for porting to access from out side)
       docker container run -idt -p 8888:80 nginx (-p is manaully porting)
       docker run -idt --name ghost -p 3001:2368 ghost:alpine (running appication)
    Commands;
         docker images
         docker images history imageID
         docker pull ubuntu
         docker pull centos
         docker container run -idt --name dev-ubuntu --net host ubuntu bash 
                    (--net host networking run this image any port)
         docker container run -idt --name dev-centos --net host centos bash 
         to go inside the container 
          docker exec -it dev-ubuntu bash
            ps aux
         docker stop dev-ubuntu
         then docker start dev-ubuntu
        -- launch UI portainer.io
        -- github.com/schoolofdevops
      
*. Setting up environment for K8s:

     -Networks are weave works and flannel.
     -kubectl get cs
         (CS is Component status i,e scheduler,controller and etcd information)
     -
     git clone https://github.com/schoolofdevops/k8s-code.git
     - visualizer UI for control plane
     
     
     
     
     
         
            
            
            
         
                   
    
       
   
        
        
        
    
         
      
